<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>It's automatic! - Ansible</title><link href="https://automaticdavid.github.io/" rel="alternate"></link><link href="https://automaticdavid.github.io/feeds/ansible.atom.xml" rel="self"></link><id>https://automaticdavid.github.io/</id><updated>2020-06-05T00:00:00+02:00</updated><entry><title>Interop Ansible &amp; Cisco NSO</title><link href="https://automaticdavid.github.io/nso-06-2020.html" rel="alternate"></link><published>2020-06-05T00:00:00+02:00</published><updated>2020-06-05T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2020-06-05:/nso-06-2020.html</id><summary type="html">&lt;p&gt;Ansible is a powerful solution to manage network infrastructure. But sometimes there's already a &lt;a href="https://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html"&gt;Cisco NSO&lt;/a&gt; setup. The Ansible modules for NSO allow using the two solutions side by side, automating NSO with Ansible. &lt;/p&gt;
&lt;p&gt;The code is available at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/ansible-nso"&gt;https://github.com/automaticdavid/ansible-nso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This can be tested using the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ansible is a powerful solution to manage network infrastructure. But sometimes there's already a &lt;a href="https://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html"&gt;Cisco NSO&lt;/a&gt; setup. The Ansible modules for NSO allow using the two solutions side by side, automating NSO with Ansible. &lt;/p&gt;
&lt;p&gt;The code is available at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/ansible-nso"&gt;https://github.com/automaticdavid/ansible-nso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This can be tested using the Cisco labs:&lt;br&gt;
&lt;a href="https://devnetsandbox.cisco.com/RM/Topology"&gt;https://devnetsandbox.cisco.com/RM/Topology&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1- Sync NSO&lt;/h2&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso1.gif"&gt;&lt;/p&gt;
&lt;p&gt;In this first part we start by executing the &lt;code&gt;check_sync.yml&lt;/code&gt; playbook which verifies if the network devices are in sync with the NSO database. It's an example of using the &lt;code&gt;nso_action&lt;/code&gt; Ansible module. We're using it to check the sync status of a given switch, then we check the status for all the devices. &lt;/p&gt;
&lt;p&gt;Then I run the &lt;code&gt;show_address.yml&lt;/code&gt; playbook: it's an example of using the  &lt;code&gt;nso_query&lt;/code&gt; module to run an XPATH query against NSO. I use it to display the names and IP address of my devices.&lt;/p&gt;
&lt;p&gt;I then telnet into one switch (the whole cisco lab is telnet only) and make a manual confiugration change. When I run  &lt;code&gt;check_sync.yml&lt;/code&gt; again, I see that the device is "out-of-sync". With Ansible it becomes easy to deal with such an exception: we could automatically open a ticket in an ITSM system, or trigger a remediation action. &lt;/p&gt;
&lt;p&gt;This remediation could be the next playbook: &lt;code&gt;sync_to.yml&lt;/code&gt;, which executes a sync-to NSO action. This updates the switch configuration with what's defined in the NSO configuration, discarding the manual change. When I run &lt;code&gt;check_sync.yml&lt;/code&gt; again, everything is in sync. &lt;/p&gt;
&lt;h2&gt;2- Using NSO as a Source Of Truth&lt;/h2&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso2.gif"&gt;&lt;/p&gt;
&lt;p&gt;We start with a playbook that uses the &lt;code&gt;nso_verify&lt;/code&gt; Ansible module to perform a backup of the NSO config. We get a local directory with YAML files describing the configuration of each device. Since it's YAML we could store this in git and start managing all our configs as code.  &lt;/p&gt;
&lt;p&gt;To show how this would look like, I change the config of a device by modifying its YAML file. I then run the &lt;code&gt;apply_sot.yml&lt;/code&gt; playbook. The first task reads the data from our local "source of truth" and applies it to the NSO config using the &lt;code&gt;nso_config&lt;/code&gt; module. We then use the &lt;code&gt;nso_verify&lt;/code&gt; module and it shows there is indeed a configuration violation between the NSO config and what is actually defined on the switch: &lt;/p&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso3.png"&gt;&lt;/p&gt;
&lt;p&gt;The playbook follows with a task called "Apply SOT" that executes a sync-to, in order to push the NSO config to the device. We then run one last "Check sync" to confirm that everything is now in sync. &lt;/p&gt;
&lt;p&gt;It is also possible to verify a specific configuration element, as show in the &lt;code&gt;verify_config.yml&lt;/code&gt; playbook. We just check a subset of the NSO config. It can be usefull, for example to check for something across many devices. &lt;/p&gt;
&lt;p&gt;We then run the &lt;code&gt;apply_sot.yml&lt;/code&gt; playbook a second time: nothing happens and "changed" is at 0. That's because the playbook is indempotent and Ansible doesn't do anything when there's nothing to do. Combined with the use of &lt;code&gt;--check-mode&lt;/code&gt; this can be used to check for the compliance of the NSO config. &lt;/p&gt;
&lt;p&gt;Finaly I telnet into the device to show that the change we made in the source of truth was indeed pushed to the physical device. &lt;/p&gt;
&lt;h2&gt;3- Ansible Resource Modules &amp;amp; NSO&lt;/h2&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso4.gif"&gt;&lt;/p&gt;
&lt;p&gt;Here we use one of the many Ansible network modules to change the config of an NXOS device directly, without using NSO. To use Ansible, I enabled ssh on one of the lab's equipement and created an Ansible inventory file. We then use the &lt;code&gt;nxos_vlan&lt;/code&gt; module: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;- name: Direct device change&lt;/span&gt;
&lt;span class="err"&gt;  nxos_vlans:&lt;/span&gt;
&lt;span class="err"&gt;    config:&lt;/span&gt;
&lt;span class="err"&gt;      - vlan_id: 501&lt;/span&gt;
&lt;span class="err"&gt;        name: ansible&lt;/span&gt;
&lt;span class="err"&gt;    state:  merged&lt;/span&gt;
&lt;span class="err"&gt;  register: r_vlan&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using Ansible's native network modules to automate the network can be easier than through NSO. Here we see that the module shows the "before" and "after" states for the change. &lt;/p&gt;
&lt;p&gt;We then use &lt;code&gt;nso_verify&lt;/code&gt; which shows a violations since NSO is now out of sync. Finally we run a sync_from to push the changed we made with Ansible into the NSO config. &lt;/p&gt;</content><category term="Ansible"></category></entry><entry><title>Using Ansible to manage ios devices</title><link href="https://automaticdavid.github.io/webinar-05-2020.html" rel="alternate"></link><published>2020-05-15T00:00:00+02:00</published><updated>2020-05-15T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2020-05-15:/webinar-05-2020.html</id><summary type="html">&lt;p&gt;Here's a small write up on the demo I did for our "Beyond Linux, Automate all the things" webinar.&lt;/p&gt;
&lt;p&gt;The code I used is at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/webinar_052020"&gt;https://github.com/automaticdavid/webinar_052020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The security workshop can be accessed at:&lt;br&gt;
&lt;a href="https://ansible.github.io/workshops/"&gt;https://ansible.github.io/workshops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The webinar replay (in french) is at:&lt;br&gt;
&lt;a href="https://www.redhat.com/en/events/webinar/red-hat-ansible-automation-platform-cloud-reseau-iot-lautomatisation-au-dela-des-systemes-linux"&gt;L …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a small write up on the demo I did for our "Beyond Linux, Automate all the things" webinar.&lt;/p&gt;
&lt;p&gt;The code I used is at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/webinar_052020"&gt;https://github.com/automaticdavid/webinar_052020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The security workshop can be accessed at:&lt;br&gt;
&lt;a href="https://ansible.github.io/workshops/"&gt;https://ansible.github.io/workshops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The webinar replay (in french) is at:&lt;br&gt;
&lt;a href="https://www.redhat.com/en/events/webinar/red-hat-ansible-automation-platform-cloud-reseau-iot-lautomatisation-au-dela-des-systemes-linux"&gt;L’automatisation au delà des systèmes Linux&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1- Using facts &amp;amp; ios_command&lt;/h2&gt;
&lt;p&gt;&lt;img alt="webinar1_demo_1" src="https://automaticdavid.github.io/images/webinar1_demo_1.gif"&gt;&lt;/p&gt;
&lt;p&gt;In this first part I showed the inventory used and how we can use inventory groups. In the &lt;code&gt;gather_ios_data.yml&lt;/code&gt; playbook, note that I'm using &lt;code&gt;gather_facts: yes&lt;/code&gt; for network devices which is new with Ansible 2.9. This allows me to use the &lt;code&gt;ansible_net_*&lt;/code&gt; variables directly in my play!&lt;/p&gt;
&lt;p&gt;I then show how to use &lt;code&gt;ios_command&lt;/code&gt; to run commands and register the output. I use this to diplay snmp settings on my 4 routers.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;config_routers.yml&lt;/code&gt; playbook allows me to change those snmp settings. Note that when I run it 2 times, the second time does nothing: &lt;code&gt;changed=0&lt;/code&gt; is displayed and all the nodes are green OK. That's &lt;strong&gt;indempotency&lt;/strong&gt;: Ansible doesn't do anything if we're already in the state we want. &lt;/p&gt;
&lt;p&gt;I then log on to the device rtr1 and make a manual change. When I run the playbook again, Ansible corrects that one thing only.&lt;/p&gt;
&lt;h2&gt;2- Ressource modules &amp;amp; Source of truth.&lt;/h2&gt;
&lt;p&gt;&lt;img alt="webinar1_demo_2" src="https://automaticdavid.github.io/images/webinar1_demo_2.gif"&gt;&lt;/p&gt;
&lt;p&gt;To take this a bit further, I then use the &lt;code&gt;ios_facts&lt;/code&gt; modules, and with Ansible 2.9 this comes with a powerfull feature: Ansible is able to extract information from my already configured devices and produce structured data. This is shown when I execute &lt;code&gt;gather_ios_resource.yml&lt;/code&gt; and display the L3 interfaces configuration as a YAML list of interfaces:&lt;/p&gt;
&lt;p&gt;&lt;img alt="webinar1_demo_2" src="https://automaticdavid.github.io/images/webinar1_demo2_list.png"&gt;&lt;/p&gt;
&lt;p&gt;Each list element (starting with a dash) is a dictionnary that contains keys: in the example "ipv4" and "name". The "ipv4" key contains a list, here with only one element. This element is also a dictionary, with only one key: "address".&lt;br&gt;
This makes it very easy to read and modify configuration values. &lt;/p&gt;
&lt;p&gt;As a matter of fact the playbook also writes these values in a &lt;code&gt;host_vars&lt;/code&gt; directory. In the demo I then make a change in these values and run the &lt;code&gt;config_l3.yml&lt;/code&gt; playbook in check mode first: this tells us what Ansible would change but doesn't actually change anything. Then I apply the change by running in normal mode. When I run the &lt;code&gt;gather_ios_resource.yml&lt;/code&gt; again, I can see that the change was made on rtr1. The local source of truth is not updated: it's already up to date.  &lt;/p&gt;
&lt;p&gt;What we see here is that Ansible is able to produce structured configuration data (with the &lt;code&gt;ios_facts&lt;/code&gt; module) and then consume this data to apply configuration changes (with the &lt;code&gt;ios_l3_interfaces&lt;/code&gt; module). Since the configuration is in YAML, it can be managed as code in git, with the inventory itself. This means that you have full tracability of changes, you can re-apply any version of your infrastrcture or manage it with a gitflow. &lt;/p&gt;
&lt;p&gt;As always with Ansible, it starts with some very simple concepts but delivers powerfull ways of doing things. &lt;/p&gt;
&lt;p&gt;Find out more about ressource modules in this Ansible Automates talk by &lt;a href="https://twitter.com/ipvsean?lang=en"&gt;@IPvSean&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://www.ansible.com/2019-ansible-network-automation-resource-modules"&gt;https://www.ansible.com/2019-ansible-network-automation-resource-modules&lt;/a&gt; &lt;/p&gt;</content><category term="Ansible"></category></entry></feed>