<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>It's automatic! - Ansible</title><link href="https://automaticdavid.github.io/" rel="alternate"></link><link href="https://automaticdavid.github.io/feeds/ansible.atom.xml" rel="self"></link><id>https://automaticdavid.github.io/</id><updated>2020-06-05T00:00:00+02:00</updated><entry><title>Interop Ansible &amp; Cisco NSO</title><link href="https://automaticdavid.github.io/nso-06-2020-fr.html" rel="alternate"></link><published>2020-06-05T00:00:00+02:00</published><updated>2020-06-05T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2020-06-05:/nso-06-2020-fr.html</id><summary type="html">&lt;p&gt;Ansible est très performant pour automatiser les equipement réseau. Mais parfois les clients ont deja une infra &lt;a href="https://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html"&gt;Cisco NSO&lt;/a&gt; en place. Les modules Ansible pour NSO permettent d'utiliser les deux solutions en cote à cote, de passer de l'une à l'autre de façon simple et finalement de rendre NSO plus …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ansible est très performant pour automatiser les equipement réseau. Mais parfois les clients ont deja une infra &lt;a href="https://www.cisco.com/c/en/us/solutions/service-provider/solutions-cloud-providers/network-services-orchestrator-solutions.html"&gt;Cisco NSO&lt;/a&gt; en place. Les modules Ansible pour NSO permettent d'utiliser les deux solutions en cote à cote, de passer de l'une à l'autre de façon simple et finalement de rendre NSO plus interessant.&lt;/p&gt;
&lt;p&gt;Le code utilisé est à:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/ansible-nso"&gt;https://github.com/automaticdavid/ansible-nso&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Vous pouvez facilement tester en utilisant, comme moi, le lab NSO proposé par Cisco:
&lt;a href="https://devnetsandbox.cisco.com/RM/Topology"&gt;https://devnetsandbox.cisco.com/RM/Topology&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1- Piloter le sync NSO&lt;/h2&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso1.gif"&gt;&lt;/p&gt;
&lt;p&gt;Dans cette première partie on commence par executer le playbook &lt;code&gt;check_sync.yml&lt;/code&gt; qui permet de verifier que les switches presents dans l'infra sont synchronisés avec la base NSO. C'est un exemple d'utilisation du module ansible &lt;code&gt;nso_action&lt;/code&gt; qui permet de declencher des actions NSO. On l'execute d'abord pour un switch nommé et ensuite on check le sync pour tous les equipements. &lt;/p&gt;
&lt;p&gt;Ensuite j'execute le playbook &lt;code&gt;show_address.yml&lt;/code&gt;: c'est un exemple d'utilisation du module &lt;code&gt;nso_query&lt;/code&gt; qui permet de faire une requete XPATH contre NSO, et que j'utilise pour afficher les IP des mes equipements. Je me connecte ensuite à un switch et je modifie la configuration en direct. Executer de nouveau &lt;code&gt;check_sync.yml&lt;/code&gt; montre alors que l'equipement en question est "out-of-sync". Il devient facile de gerer cette exception dans un playbook, en ouvrant un tiquet dans un ITSM par exemple ou en declenchant une action de remediation. &lt;/p&gt;
&lt;p&gt;Cette action peut etre par exemple le playbook que j'execute ensute, qui effectue un sync-to NSO: il pousse la configuration NSO vers le switch. J'execute ensuite le &lt;code&gt;check_sync.yml&lt;/code&gt;de nouveau pour verifier que tout est synchrone. &lt;/p&gt;
&lt;h2&gt;2- Source Of Truth avec NSO&lt;/h2&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso2.gif"&gt;&lt;/p&gt;
&lt;p&gt;Dans cette deuxieme etape on commence par utiliser le module &lt;code&gt;nso_verify&lt;/code&gt; pour effectuter un backup de la conf NSO. Ce qu'on obtient c'est une copie local des config des equipements, sous forme de YAML. On peut donc utiliser ces fichier comme "source de verité" de l'infrastructure, en la stockant dans git par exemple. &lt;/p&gt;
&lt;p&gt;Je continue en modifiant une information de configuration pour un des equipements dans son fichier de description. J'excecute ensuite le playbook &lt;code&gt;apply_sot.yml&lt;/code&gt;. La premiere tache lit les infos de la "source of truth" et les applique à la configuration NSO en utilisant le module &lt;code&gt;nso_config&lt;/code&gt;. On fait ensuite un &lt;code&gt;nso_verify&lt;/code&gt; qui montre qu'il y a bien une violation correspondant à la modification que nous avons effectuée, c'est à dire que l'equipement n'est pas synchro avec la config NSO:&lt;/p&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso3.png"&gt;&lt;/p&gt;
&lt;p&gt;On effectue donc un sync-to dans la tache "Apply SOT" et un dernier "Check sync" confirme que l'equipement a a été synchronisé avec la source de verité. &lt;/p&gt;
&lt;p&gt;On peut aussi verifier un element de configuration particulier, c'est ce que montre le playbook &lt;code&gt;verify_config.yml&lt;/code&gt;: on verifie juste un sous ensemble de la config NSO. Cela peut être interessant par exemple si on veut verifier un meme element de config mais sur un très grand nombre d'equipement. &lt;/p&gt;
&lt;p&gt;Enfin j'execute le playbook &lt;code&gt;apply_sot.yml&lt;/code&gt; une seconde fois: il ne se passe rien et "changed" est à 0. en effet, le playbook est indempotent est Ansible ne fait rien s'il n'y a rien a faire. Avec &lt;code&gt;--check-mode&lt;/code&gt; cela permet de verifier facilement la conformité de la config NSO. &lt;/p&gt;
&lt;p&gt;Pour finir je me connecte à l'equipement pour verifier que la modification faite dans la source of truth a bien été appliquée.&lt;/p&gt;
&lt;h2&gt;3- Resource Modules Ansible &amp;amp; NSO&lt;/h2&gt;
&lt;p&gt;&lt;img alt="NSO" src="https://automaticdavid.github.io/images/nso4.gif"&gt;&lt;/p&gt;
&lt;p&gt;Dans cette derniere partie, on utilise un des modules reseau d'Ansible pour changer la config NXOS directement sur le switch. Le module utilisé est &lt;code&gt;nxos_vlan&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;- name: Direct device change&lt;/span&gt;
&lt;span class="err"&gt;  nxos_vlans:&lt;/span&gt;
&lt;span class="err"&gt;    config:&lt;/span&gt;
&lt;span class="err"&gt;      - vlan_id: 501&lt;/span&gt;
&lt;span class="err"&gt;        name: ansible&lt;/span&gt;
&lt;span class="err"&gt;    state:  merged&lt;/span&gt;
&lt;span class="err"&gt;  register: r_vlan&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On voit que le module remonte les etats "before" et "after" pour le changement. &lt;/p&gt;
&lt;p&gt;Manipuler les conf des equipements réseau avec Ansible peut être plus simple qu'avec NSO. &lt;/p&gt;
&lt;p&gt;Après le changement, on effectue une verification de la synchro NSO: evidement il y a une violation. Le playbook effectue alors un sync_from pour resynchroniser NSO depuis la configuration de l'equipement. On est donc capable d'utiliser NSO depuis Ansible, mais aussi Ansible et NSO en "cote à cote".&lt;/p&gt;</content><category term="Ansible"></category></entry><entry><title>Using Ansible to manage ios devices</title><link href="https://automaticdavid.github.io/webinar-05-2020.html" rel="alternate"></link><published>2020-05-15T00:00:00+02:00</published><updated>2020-05-15T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2020-05-15:/webinar-05-2020.html</id><summary type="html">&lt;p&gt;Here's a small write up on the demo I did for our "Beyond Linux, Automate all the things" webinar.&lt;/p&gt;
&lt;p&gt;The code I used is at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/webinar_052020"&gt;https://github.com/automaticdavid/webinar_052020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The security workshop can be accessed at:&lt;br&gt;
&lt;a href="https://ansible.github.io/workshops/"&gt;https://ansible.github.io/workshops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The webinar replay (in french) is at:&lt;br&gt;
&lt;a href="https://www.redhat.com/en/events/webinar/red-hat-ansible-automation-platform-cloud-reseau-iot-lautomatisation-au-dela-des-systemes-linux"&gt;L …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here's a small write up on the demo I did for our "Beyond Linux, Automate all the things" webinar.&lt;/p&gt;
&lt;p&gt;The code I used is at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/webinar_052020"&gt;https://github.com/automaticdavid/webinar_052020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The security workshop can be accessed at:&lt;br&gt;
&lt;a href="https://ansible.github.io/workshops/"&gt;https://ansible.github.io/workshops/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The webinar replay (in french) is at:&lt;br&gt;
&lt;a href="https://www.redhat.com/en/events/webinar/red-hat-ansible-automation-platform-cloud-reseau-iot-lautomatisation-au-dela-des-systemes-linux"&gt;L’automatisation au delà des systèmes Linux&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1- Using facts &amp;amp; ios_command&lt;/h2&gt;
&lt;p&gt;&lt;img alt="webinar1_demo_1" src="https://automaticdavid.github.io/images/webinar1_demo_1.gif"&gt;&lt;/p&gt;
&lt;p&gt;In this first part I showed the inventory used and how we can use inventory groups. In the &lt;code&gt;gather_ios_data.yml&lt;/code&gt; playbook, note that I'm using &lt;code&gt;gather_facts: yes&lt;/code&gt; for network devices which is new with Ansible 2.9. This allows me to use the &lt;code&gt;ansible_net_*&lt;/code&gt; variables directly in my play!&lt;/p&gt;
&lt;p&gt;I then show how to use &lt;code&gt;ios_command&lt;/code&gt; to run commands and register the output. I use this to diplay snmp settings on my 4 routers.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;config_routers.yml&lt;/code&gt; playbook allows me to change those snmp settings. Note that when I run it 2 times, the second time does nothing: &lt;code&gt;changed=0&lt;/code&gt; is displayed and all the nodes are green OK. That's &lt;strong&gt;indempotency&lt;/strong&gt;: Ansible doesn't do anything if we're already in the state we want. &lt;/p&gt;
&lt;p&gt;I then log on to the device rtr1 and make a manual change. When I run the playbook again, Ansible corrects that one thing only.&lt;/p&gt;
&lt;h2&gt;2- Ressource modules &amp;amp; Source of truth.&lt;/h2&gt;
&lt;p&gt;&lt;img alt="webinar1_demo_2" src="https://automaticdavid.github.io/images/webinar1_demo_2.gif"&gt;&lt;/p&gt;
&lt;p&gt;To take this a bit further, I then use the &lt;code&gt;ios_facts&lt;/code&gt; modules, and with Ansible 2.9 this comes with a powerfull feature: Ansible is able to extract information from my already configured devices and produce structured data. This is shown when I execute &lt;code&gt;gather_ios_resource.yml&lt;/code&gt; and display the L3 interfaces configuration as a YAML list of interfaces:&lt;/p&gt;
&lt;p&gt;&lt;img alt="webinar1_demo_2" src="https://automaticdavid.github.io/images/webinar1_demo2_list.png"&gt;&lt;/p&gt;
&lt;p&gt;Each list element (starting with a dash) is a dictionnary that contains keys: in the example "ipv4" and "name". The "ipv4" key contains a list, here with only one element. This element is also a dictionary, with only one key: "address".&lt;br&gt;
This makes it very easy to read and modify configuration values. &lt;/p&gt;
&lt;p&gt;As a matter of fact the playbook also writes these values in a &lt;code&gt;host_vars&lt;/code&gt; directory. In the demo I then make a change in these values and run the &lt;code&gt;config_l3.yml&lt;/code&gt; playbook in check mode first: this tells us what Ansible would change but doesn't actually change anything. Then I apply the change by running in normal mode. When I run the &lt;code&gt;gather_ios_resource.yml&lt;/code&gt; again, I can see that the change was made on rtr1. The local source of truth is not updated: it's already up to date.  &lt;/p&gt;
&lt;p&gt;What we see here is that Ansible is able to produce structured configuration data (with the &lt;code&gt;ios_facts&lt;/code&gt; module) and then consume this data to apply configuration changes (with the &lt;code&gt;ios_l3_interfaces&lt;/code&gt; module). Since the configuration is in YAML, it can be managed as code in git, with the inventory itself. This means that you have full tracability of changes, you can re-apply any version of your infrastrcture or manage it with a gitflow. &lt;/p&gt;
&lt;p&gt;As always with Ansible, it starts with some very simple concepts but delivers powerfull ways of doing things. &lt;/p&gt;
&lt;p&gt;Find out more about ressource modules in this Ansible Automates talk by &lt;a href="https://twitter.com/ipvsean?lang=en"&gt;@IPvSean&lt;/a&gt;:&lt;br&gt;
&lt;a href="https://www.ansible.com/2019-ansible-network-automation-resource-modules"&gt;https://www.ansible.com/2019-ansible-network-automation-resource-modules&lt;/a&gt; &lt;/p&gt;</content><category term="Ansible"></category></entry></feed>