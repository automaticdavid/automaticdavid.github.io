<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>It's automatic! - Tower</title><link href="https://automaticdavid.github.io/" rel="alternate"></link><link href="https://automaticdavid.github.io/feeds/tower.atom.xml" rel="self"></link><id>https://automaticdavid.github.io/</id><updated>2020-07-14T00:00:00+02:00</updated><entry><title>Infra As Code with Ansible for VMware vSphere</title><link href="https://automaticdavid.github.io/iac-vmware.html" rel="alternate"></link><published>2020-07-14T00:00:00+02:00</published><updated>2020-07-14T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2020-07-14:/iac-vmware.html</id><summary type="html">&lt;p&gt;This is a short write up about a demo I did for a Red Hat France Webinar.
You can find the full replay (in french) at: &lt;br&gt;
&lt;a href="https://www.redhat.com/fr/events/webinar/automate-enterprise-infrastructure"&gt;Automatiser à l’échelle de l’entreprise et gérer l'infrastructure comme du code avec Red Hat Ansible Automation Platform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code used is at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a short write up about a demo I did for a Red Hat France Webinar.
You can find the full replay (in french) at: &lt;br&gt;
&lt;a href="https://www.redhat.com/fr/events/webinar/automate-enterprise-infrastructure"&gt;Automatiser à l’échelle de l’entreprise et gérer l'infrastructure comme du code avec Red Hat Ansible Automation Platform&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code used is at: &lt;br&gt;
&lt;a href="https://github.com/automaticdavid/demo_vmware/tree/webinar_072020"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The inventory I'm using is at:&lt;br&gt;
&lt;a href="https://github.com/automaticdavid/vmware_services/tree/master/paris"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1 Setting up the Inventories in Tower&lt;/h2&gt;
&lt;p&gt;We're using a Tower inventory with 2 sources: one is the project that points to the git inventory "vmware service definition", the other is a vCenter based dynamic inventory:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Inventory" src="https://automaticdavid.github.io/images/webinar2_inventory.png"&gt;&lt;/p&gt;
&lt;p&gt;Tower ships with a default vCenter inventory, but for this demo I'm using the latest upstream version. To do this I copied the upstream collection into my own repo at: &lt;a href="https://github.com/automaticdavid/vmware_inventory.git"&gt;https://github.com/automaticdavid/vmware_inventory.git&lt;/a&gt;.&lt;br&gt;
Note that I respected the collection directory path: &lt;code&gt;collections/ansible_collections/community/vmware/&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;I also added an &lt;code&gt;ansible.cfg&lt;/code&gt; file that enables the vmware community inventory plugin and a configuration file for the plugin: &lt;code&gt;conf.vmware.yml&lt;/code&gt; (this file has to end in .vmware.yml). I'm using this to force the dynamic inventory to report hostnames as the name of the VM, instead of the default which is a concatenation of the VM name and the VM UUID. &lt;/p&gt;
&lt;p&gt;To use vCenter tags, we need pyvmomi (obviously) and also the python VMware Automation SDK, as documented in: (https://docs.ansible.com/ansible/latest/plugins/inventory/vmware_vm_inventory.html). &lt;br&gt;
To run this cleanly, I created a dedicated venv as explained in: (https://docs.ansible.com/ansible-tower/latest/html/upgrade-migration-guide/virtualenv.html)&lt;/p&gt;
&lt;p&gt;Inside Tower I also defined a custom credential to use with this inventory: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Credential" src="https://automaticdavid.github.io/images/webinar2_cred.png"&gt;&lt;/p&gt;
&lt;p&gt;This provides the environment variables needed to connect to the vCenter. Depending on the version of the collection you're using, you may also use a Tower vCenter credential for this. 
The inventory source definition in Tower is a standard "sourced from a project" definition, with an added variable to enable using the custom plugin: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Credential" src="https://automaticdavid.github.io/images/webinar2_inventory2.png"&gt;&lt;/p&gt;
&lt;p&gt;This also allows to specify that we're using our custom venv.&lt;/p&gt;
&lt;h2&gt;2 Provisioning a Service&lt;/h2&gt;
&lt;p&gt;We start with an empty vCenter and a service definition in git. The definition takes place in services.ini where we add the service &lt;code&gt;app1&lt;/code&gt; to the inventory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[services:children]&lt;/span&gt;
&lt;span class="na"&gt;app1&lt;/span&gt;

&lt;span class="k"&gt;[app1]&lt;/span&gt;
&lt;span class="na"&gt;host1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We also create in the &lt;code&gt;group_vars&lt;/code&gt; directory a file called &lt;code&gt;app1.yml&lt;/code&gt; that defines the &lt;code&gt;app1&lt;/code&gt; service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;service_config&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;terminator&lt;/span&gt;
    &lt;span class="n"&gt;role&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;webserver&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;app1&lt;/span&gt;
    &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;small&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;terminator_v1&lt;/span&gt;
    &lt;span class="n"&gt;quote&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;give&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;boots&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;gun&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;motorcycle&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; 
  &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie_machine&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I like how this provides a very clean and readable definition for a service. Although this is a simple example it could very well be extended to manage more complex use cases. &lt;/p&gt;
&lt;p&gt;We then run a Tower Workflow that does 4 things: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refresh the project based inventory source to read the new service definitions from git&lt;/li&gt;
&lt;li&gt;Provision and tag the VMs needed for the new services&lt;/li&gt;
&lt;li&gt;Refresh the vCenter dynamic inventory once the VM are provisioned, getting the tags as Tower inventory groups&lt;/li&gt;
&lt;li&gt;Run a playbook that install the application layer needed on each VM of the services, based on the VM's groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here's a video of what it looks like (better in full screen): &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/V0hhakK6Uwc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;On my lab setup, the workflow takes less than 4mn to complete.&lt;/p&gt;
&lt;h2&gt;3 Adding and Modifying a Service&lt;/h2&gt;
&lt;p&gt;The playbook we call in the Job Template is indempotent: when I add a whole new service, running the same workflow just adds what's needed without doing anything to our already provisioned service. &lt;/p&gt;
&lt;p&gt;In the video below, I add a new service &lt;code&gt;app2&lt;/code&gt; but also modify the &lt;code&gt;version&lt;/code&gt; value of the &lt;code&gt;app1&lt;/code&gt; service. In the Tower log we can see that Ansible does only what's needed and leaves what is already configured untouched. &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/XfyPkvEOqSE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;We can also use git to track changes to the services definitions: &lt;/p&gt;
&lt;p&gt;&lt;img alt="Git diff" src="https://automaticdavid.github.io/images/webinar2_git.png"&gt;&lt;/p&gt;
&lt;h2&gt;4 Force delete of a VM&lt;/h2&gt;
&lt;p&gt;What's cool with Ansible is that the IaC behaviour is based on indempotency of playbooks and definition of state in a source of truth (the inventory in git), as opposed to other tools that need their own statefull reference. This means that I can delete a VM in vCenter and when the Job Template is executed again, it just corrects what's missing (in this lab the IP of the recreated VM changes, but in real life we'd use an IPAM). We are not locked to only one control plane.   &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/K0xLGhgTuhA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;We can also run the Job Template in &lt;code&gt;check_mode&lt;/code&gt; and do compliance checking. &lt;/p&gt;
&lt;h2&gt;What's next&lt;/h2&gt;
&lt;p&gt;There's a number of other things we could do from here:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable &lt;a href="https://docs.ansible.com/ansible-tower/latest/html/userguide/webhooks.html"&gt;webhooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Enable different environements to test and promote our infrastructure and services definitions&lt;/li&gt;
&lt;li&gt;Add support for changing the VM's hardware definition of a provisioned service&lt;/li&gt;
&lt;li&gt;Use pull requests to manage the services definitions &lt;/li&gt;
&lt;li&gt;Add other roles for services, for instance eap &lt;/li&gt;
&lt;/ul&gt;</content><category term="Tower"></category></entry><entry><title>Using conditional import of external vars with Tower's Smart Inventories</title><link href="https://automaticdavid.github.io/using-conditional-import-of-external-vars-with-towers-smart-inventories.html" rel="alternate"></link><published>2019-10-20T00:00:00+02:00</published><updated>2019-10-20T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2019-10-20:/using-conditional-import-of-external-vars-with-towers-smart-inventories.html</id><summary type="html">&lt;p&gt;The problem we are trying to solve is that smart inventories in Tower do not include groups, and therefore we can't use group_vars defined at the inventories level. Since host_vars are imported we will use a host_var to trigger import of the wanted vars.&lt;/p&gt;
&lt;h2&gt;1- VM Properties&lt;/h2&gt;
&lt;p&gt;We're going to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The problem we are trying to solve is that smart inventories in Tower do not include groups, and therefore we can't use group_vars defined at the inventories level. Since host_vars are imported we will use a host_var to trigger import of the wanted vars.&lt;/p&gt;
&lt;h2&gt;1- VM Properties&lt;/h2&gt;
&lt;p&gt;We're going to use the "Custom Attributes" feature of vSphere to inherit a host_vars. Each VM has a custom attribute &lt;code&gt;dcl-custom-attr&lt;/code&gt; but with a diferent value for each of our test VMs:&lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/custom-prop.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/custom-prop-2.png"&gt;&lt;/p&gt;
&lt;h2&gt;2- Dynamic Inventory &amp;amp; Smart Inventory in Tower&lt;/h2&gt;
&lt;p&gt;We're using the VMware dynamic inventory with source variables: &lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/inv.png"&gt;&lt;/p&gt;
&lt;p&gt;We want to test importing vars for hosts sourced from a smart inventory so we define a smart inventory:&lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/smart.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/smart-hosts.png"&gt;&lt;/p&gt;
&lt;p&gt;The VMs in the smart inventory show the custom attributes as host_vars:&lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/vars.png"&gt;&lt;/p&gt;
&lt;h2&gt;3- Conditional include of vars&lt;/h2&gt;
&lt;p&gt;Now we can use the following playbook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;---&lt;/span&gt;
&lt;span class="x"&gt;- name: Conditional vars inclusion based on host_vars &lt;/span&gt;
&lt;span class="x"&gt;  hosts: all&lt;/span&gt;
&lt;span class="x"&gt;  gather_facts: no&lt;/span&gt;

&lt;span class="x"&gt;  tasks:&lt;/span&gt;

&lt;span class="x"&gt;    - name: Extract Custom Prop Value&lt;/span&gt;
&lt;span class="x"&gt;      set_fact:&lt;/span&gt;
&lt;span class="x"&gt;        vm_props: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;attribute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt; &lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="x"&gt;    - name: Include for first group&lt;/span&gt;
&lt;span class="x"&gt;      include_vars:&lt;/span&gt;
&lt;span class="x"&gt;        file: first.yml&lt;/span&gt;
&lt;span class="x"&gt;      when: &amp;#39;&amp;quot;dcl-1&amp;quot; in vm_props&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;    - name: Include for second group&lt;/span&gt;
&lt;span class="x"&gt;      include_vars:&lt;/span&gt;
&lt;span class="x"&gt;        file: second.yml&lt;/span&gt;
&lt;span class="x"&gt;      when: &amp;#39;&amp;quot;dcl-2&amp;quot; in vm_props&amp;#39;&lt;/span&gt;

&lt;span class="x"&gt;    - name: Display imported value&lt;/span&gt;
&lt;span class="x"&gt;      debug: &lt;/span&gt;
&lt;span class="x"&gt;        msg: &amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;my_imported_value&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Depending on the value of the host_var we include a file or another, that defines the variable &lt;code&gt;my_imported_value&lt;/code&gt; but with different values. &lt;BR&gt;
See: https://github.com/automaticdavid/set_vars&lt;/p&gt;
&lt;p&gt;We define the associated Tower template:&lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/template.png"&gt;&lt;/p&gt;
&lt;p&gt;Execution yields the inclusion of the var with the correct value for each VM: &lt;/p&gt;
&lt;p&gt;&lt;img alt="VM Custom prop" src="https://automaticdavid.github.io/images/result.png"&gt;&lt;/p&gt;
&lt;p&gt;We can use the same mechanism to include different vars for each VM.&lt;/p&gt;
&lt;p&gt;This could be used in a role that would get included at the begining of each playbook, or with a Tower Workflow. &lt;/p&gt;</content><category term="Tower"></category></entry><entry><title>Configure an SSH proxy for Ansible Tower</title><link href="https://automaticdavid.github.io/configure-an-ssh-proxy-for-ansible-tower.html" rel="alternate"></link><published>2019-04-19T00:00:00+02:00</published><updated>2019-04-19T00:00:00+02:00</updated><author><name>@automaticdavid</name></author><id>tag:automaticdavid.github.io,2019-04-19:/configure-an-ssh-proxy-for-ansible-tower.html</id><summary type="html">&lt;p&gt;In my lab, some of the VMs I provision are only accessible through a jump host. This means Tower needs to connect to the jump host first then to the target VMs in order to run playbooks. &lt;/p&gt;
&lt;p&gt;One way to enable Tower to reach isolated nodes is to use a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my lab, some of the VMs I provision are only accessible through a jump host. This means Tower needs to connect to the jump host first then to the target VMs in order to run playbooks. &lt;/p&gt;
&lt;p&gt;One way to enable Tower to reach isolated nodes is to use a dedicated ansible host, that is both accessible by Tower and able to reach the target network. This is called an isolated node and the way to set it up is described at: &lt;a href="http://docs.ansible.com/ansible-tower/latest/html/administration/clustering.html#isolated-instance-groups"&gt;6.3. Isolated Instance Groups&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Isolated nodes will have Ansible installed on them, and sometimes that's not possible on the jump host. But you can also configure Tower to use the jump host as an ssh proxy: Tower will ssh to the jump host and from it access the targets. This is documented at: &lt;a href="http://docs.ansible.com/ansible-tower/latest/html/administration/tipsandtricks.html#setting-up-a-jump-host-to-use-with-tower"&gt;22.6. Setting up a jump host to use with Tower&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I had some problems getting it to work so decided to document what I did. &lt;/p&gt;
&lt;h3&gt;1. Disable PRoot&lt;/h3&gt;
&lt;p&gt;As described in the "Tower Tips and Tricks" official documentation page.&lt;/p&gt;
&lt;h3&gt;2. Add SSH connection arguments at the inventory level&lt;/h3&gt;
&lt;p&gt;I added the following variables at the inventory level:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ansible_connection&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;span class="n"&gt;ansible_ssh_common_args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-o ProxyCommand=&amp;quot;ssh -W %h:%p -q jump-host-user@jump-host.example.com&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Defining those at the inventory level means that only the hosts of that inventory will be using the jump host. And it also means you don't have to edit SSH configuration files on the Tower host.&lt;/p&gt;
&lt;h3&gt;3. Add the SSH private key of the jump host to Tower&lt;/h3&gt;
&lt;p&gt;Tower will use it to ssh to the jump host: copy the &lt;code&gt;id_rsa&lt;/code&gt; file of the jump host on the tower host into &lt;code&gt;/var/lib/awx/.ssh/&lt;/code&gt;
Make sure it has the following user, group and permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;-rw-------. 1 awx awx 1679 Apr 30 16:37 id_rsa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also put the key in another directory and specify its path using the -i switch of the ProxyCommand.&lt;/p&gt;
&lt;h3&gt;4. Add the credentials for the target machine&lt;/h3&gt;
&lt;p&gt;Once connected to the jump host, Tower needs to connect to the target machine. 
I defined a Tower Machine Credential, in my case for the root user (of the target node) using a password to connect.
You can also use an ssh key if your target nodes support it, as with any machine credentials.&lt;/p&gt;
&lt;h3&gt;5. Define the Job Template&lt;/h3&gt;
&lt;p&gt;The tower template needs to have: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The inventory used in 2&lt;/li&gt;
&lt;li&gt;The machine credential defined in 4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And it works ! Thanks to &lt;a href="https://github.com/victorock"&gt;@victorock&lt;/a&gt; ;)&lt;/p&gt;</content><category term="Tower"></category></entry></feed>